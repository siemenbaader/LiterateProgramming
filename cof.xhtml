<?xml version='1.0' encoding='UTF-8'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
  <head>
    <title> The Javascript Consistent Object Framework </title>
    <script src="helpers.js"/> 
    <script src='showdown.js'/>
    <script src='coffee-script.js'/>
    <coffee-script><![CDATA[

      Function.prototype.raw_doc = ->
        '''
          Raw doc string for this function or null if does not exists.
        '''
        matches = @toString().match /^function\s+\w*\([^)]*\)\s+{\s+('(?:[^']|\\.)*');/
        matches and (eval matches[1]).replace /\r\n?/g, '\n'


      Function.prototype.doc_signature = ->
        '''
          Signature declared in the doc string of this function or null.
        '''
        (@raw_doc() or '').match /^[ \t]*(?:\((.*)\))?[ \t]*->(.*)(?:\n|$)/


      Function.prototype.doc = ->
        '''
          Documentation for this function or null if does not exists.
        '''
        doc = @raw_doc()
        return null unless doc
        doc = doc.replace /^.+(?:\n|$)/ , '' if @doc_signature()?
        doc = doc.replace /^(?:[ \t]*\n)*/ , ''  # Trim empty lines in beginning
        doc = doc.replace /(?:\n[ \t]*)*$/ , ''  # Trim empty lines in end
        return doc


      Function.prototype.args = ->
        '''
          String representation of arguments for this function.
        '''
        signature = @doc_signature()
        if signature? and signature[1]?
          signature[1]
        else
          @toString().match( /\(([^)]*)\)/ )[1]


      Function.prototype.return_type = ->
        '''
          The return type for this function or null if unknown. Default null.
        '''
        signature = @doc_signature()
        if signature?
          type = signature[2].trim()
          return type if type
        return null


      Function.prototype.inspect = ->
        '''
          Inspects a function.
        '''
        text = "(#{ @args() }) -> #{ @return_type() or 'return-type-not-documented' }"
        if @doc()?
          text += ('\n' + @doc()).replace /\n/g, '\n  '
        return text


      Math.sqrt.raw_doc = -> '''
        (value : Number) -> Number

        Square root of a number. If value is a negative number, NaN is returned.
      '''


      class @DocumentedObject

        doc_string: ->
          '''
            Hello, Object!
          '''

        constructor: ->
          '''
            Hello, Class!
          '''

        class: ->
          @constructor.name


       class @Foo extends DocumentedObject

    ]]></coffee-script>
  </head>
  <body>

    <style> 

      html {background: gray;}
      body { margin: auto; width: 17cm; border: 1px solid black; background: white; display: block; padding: 2cm; margin-top: 1cm;  page-break-after: always; position:relative;}
/*       footer {position: absolute; bottom: 0.5cm; left: 10cm; } */
 
/*       body { font-family: Helvetica; } */
      .abstract { font-style: italic; padding-left: 1cm; padding-right: 1cm; display:block;}
      code { padding: .5em; font-weight: bold; margin-left: 2em; display: block; border: 1px solid #ccc; background-color: #eee; white-space: pre-wrap; }
      code[type] { border: 1px solid blue; background-color: #DDF; -webkit-transition: border-color 1s ease-out, background-color 1s ease-out; }
      code.pass { border: 1px solid green; background-color: #AFA; }
      code.fail { border: 1px solid red; background-color: #FAA; }
      code.exception { border: 5px solid red; background-color: #FAA; }
      div.exception { border: 2px solid red; background-color: white; padding: 1em; margin-top: .5em; }
    </style>
<source><![CDATA[
#Dynamic Inspection and On-Line API Documentation for JavaScript
#### Bjarke Walling <<bwp@bwp.dk>> and Siemen Baader <<siemenbaader@gmail.com>>
]]></source>

<source class="abstract"><![CDATA[
Interactive consoles - or Read Eval Print Loops (REPLs) - are a central in software development with dynamic languages. They allow programmers to rapidly interact with objects and functions and learn how they behave. REPLs are used to quickly explore new ideas, as well as for debugging.

The Ruby REPL provides a powerful and concise view to inspect objects and their fields. Likewise, Python's REPL allows access to API documentation as direct properties of objects. These are important usability features for this way of programming, because these aspects are important information for reasoning about the objects under concern. Providing them in-situ, in the REPL, allows the programmer very direct access to them and reduces the need to use inspection tools or external documentation. Unfortunately, JavaScript runtimes today do not provide this level of inspection and on-line documentation.

In this dynamic paper, we have made use of a Literate Programming approach to develop an inspection framework for JavaScript. It allows dynamic inspection, and access to API documentation. 

]]></source>

<source><![CDATA[

Background
----------

### Ruby

Users of the Interactive Ruby consol, IRB, mainly use the **Object#inspect** and **Object#methods** methods to learn about the capabilities of live objects in the console. **inspect** returns a human-friendly string representation of the object. Arrays and Hashes are shown with they same syntax as they are constructed, while objects list the values of their fields and object identity (memory address). IRB by default uses the **#inspect** method to display the return values of the REPL to the user.

    irb> {2=>5}
    => {2=>5}
    irb> class Foo; attr_accessor :foo, :bar; end
    irb> f = Foo.new
    => #<Foo:0xb786e6bc>
    > f.bar = 99; f.foo = 'str'
    irb> f
    => #<Foo:0xb786e6bc @bar=99, @foo="str">

Likewise, the **Object#methods** can be used to interactively prompt which method calls an object will respond to:

    irb> f.methods
    => ["inspect", "tap", "clone", "bar=", "public_methods", "__send__", "object_id", "instance_variable_defined?", "equal?", "freeze", "extend", "send", "methods", "hash", "dup", "to_enum", "instance_variables", "eql?", "instance_eval", "id", "singleton_methods", "taint", "enum_for", "frozen?", "instance_variable_get", "instance_of?", "display", "to_a", "method", "foo", "type", "instance_exec", "protected_methods", "==", "foo=", "===", "instance_variable_set", "kind_of?", "respond_to?", "to_s", "class", "__id__", "tainted?", "=~", "private_methods", "untaint", "nil?", "is_a?", "bar"]
    

### Python

The interactive python console takes runtime-inspection further by also providing API documentation associated to live objects:

    >>> help(str)

    Help on class str in module __builtin__:

    class str(basestring)
    |  str(object) -> string
    |  
    |  Return a nice string representation of the object.
    |  If the argument is a string, the return value is the same object.
    |  
    |  Method resolution order:
    |      str
    |      basestring
    |      object
    |  
    |  Methods defined here:
    |  
    |  __add__(...)
    |      x.__add__(y) <==> x+y
    |  
    |  __contains__(...)
    |      x.__contains__(y) <==> y in x


### JavaScript

JavaScript comes with equally potent REPLs in the form of eg the node.js and Firebug or Chrome consoles. Interactively experimenting or debugging is as fruitful in JavaScript as it is in Python or Ruby - if not more, given JavaScripts generally poor error reporting.

However, JavaScript does not provide the same level of runtime assistance.

There is no Python-style way of associating API documentation with running objects. While the inspection view for objects is decent, for functions it either returns the complete source, or indicates the function being [native]. None of this is very helpful to at a glance comprehend the actual use and capabilities of the function.


    node: > require
    { [Function: require]
      resolve: [Function],
      extensions: { '.js': [Function], '.node': [Function] }
    }
    node: > require.toString()
    'function require(path) {\n    return Module._load(path, self);\n  }'
     
Chrome always tries to show the source of functions:

    chrome: > alert
    function alert() { [native code] }
    chrome: > get
    function get(url) {
      return blocking_ajax_request(url, "get");
    }


## A Dynamic Inspection and Documentation Framework

We propose including inspection and in-situ documentation in JavaScript. Our proposal adresses functions, as beeing the most needy, first.

Our propsal consists of

* **eMmber functions**
  * to inform about properties of functions, such as arity, argument and return types
* **Docstrings**
  * The first declared string in a function holds plain-text API documentation
* **A voluntary augmenting type system**
  * The docstring can optionally hold type information that is then included in the documentation, and accessible at run-time (however, it cannot be used for complier-based type checking)


Currently, the proposal does *not* address variable length argument lists (splats).

As much JavaScript programming is conducted in the Continuation Passing Style, return types from synchronous functions are similar in purpose to callback signature types of asynchronous functions. We plan on integrating these in the future.

Another effect of the widespread use of the continuation-passing style (CPS) is that much important state is kept solely in closures. Ruby's **Object#inspect** lists the content of (private) fields, because it helps programmers reason about how a program will behave. With CPS, the role of fields is being taken over by closures, which cannot easily be inspected in JavaScript. We plan on finding a model to deal with this, making this important state inspectable. One option is to provide an explicit *closure* property on functions, and to let programmers manually assign important variables to it when needed for inspection.


Finally, object inspection is not addressed as the current inspection capabilities / JSON are reasonable. 


CoffeeScript implementation
===========================


### Arguments

You can query functions for their arguments:

<code type='text/coffeescript'>
( (a, b) -> a + b ).args() == 'a, b'
</code>

And some functions declare more specific argument usage:

<code type='text/coffeescript'>
Math.sqrt.args() == 'value : Number'
</code>

You can declare arguments usage yourself:

<code type='text/coffeescript'>
( (a, b) ->
    ''' (a : Number, b : Number) -> Number '''
    a + b
).args() == 'a : Number, b : Number'
</code>


### Return type

Default the return type is unknown:

<code type='text/coffeescript'>
( (a, b) -> a + b ).return_type() == null
</code>

Some functions have their return type declared:

<code type='text/coffeescript'>
Math.sqrt.return_type() == 'Number'
</code>

You can declare return types yourself:

<code type='text/coffeescript'>
( (a, b) ->
    ''' (a : Number, b : Number) -> Number '''
    a + b
).return_type() == 'Number'
</code>

Or if you only want to declare the return type:

<code type='text/coffeescript'>
( (a, b) ->
    ''' -> Number '''
    a + b
).return_type() == 'Number'
</code>

* todo: callback signature.

### Inline documentation

Default functions are not documented:

<code type='text/coffeescript'>
( (a, b) -> a + b ).doc() == null
</code>

But they can be documented:

<code type='text/coffeescript'>
( (a, b) ->
    '''
      (a : Number, b : Number) -> Number
      The sum of two numbers. If either a or b is NaN, NaN is returned.
    '''
    a + b
).doc() == 'The sum of two numbers. If either a or b is NaN, NaN is returned.'
</code>


### Inspection

Functions can be inspected:

<code type='text/coffeescript'>
( (a, b) -> a + b ).inspect() == '(a, b) -> return-type-not-documented'
</code>

If arguments and return types are declared and inline documentation is added,
a more detailed inspection is provided:

<code type='text/coffeescript'>
Math.sqrt.inspect() == '''
  (value : Number) -> Number
    Square root of a number. If value is a negative number, NaN is returned.
'''
</code>


]]></source>


    <script><![CDATA[
      var renderMarkdown = function() {

        var showdown = new Showdown.converter();

        var sources = document.getElementsByTagName("source");
        sources.forEach( function(src) {
          var t = src.textContent;
          var html = showdown.makeHtml(t);

          // Remove first empty line of code blocks.
          html = html.replace( /(<code[^>]*>)\n/g , "$1");

          src.innerHTML = html;
        }) 
      }

      var testCodeExamples = function() {
        var examples = document.getElementsByTagName("code");
        examples.forEach( function(ex) {
          var code = ex.textContent;
          if (ex.getAttribute('type') === 'text/coffeescript') {
            try {
              var outcome = CoffeeScript.eval(code, {bare: 'on'});
            }
            catch(e) {
              ex.setAttribute("class", "exception");
              l(e)
              ex.appendChild(Node("div", {class: "exception"}, [e.toString(), ". Sorry, try REPL ..."] ))
              l(code);
            }
            ex.setAttribute("class", (outcome) ? "pass": "fail")
          }
        })
      };

      var loadCoffeeScripts = function() {
        var scripts = document.getElementsByTagName("coffee-script");
        scripts.forEach( function(script) {
          CoffeeScript.run(script.textContent);
        });
      };

      loadCoffeeScripts();
      renderMarkdown();
      testCodeExamples();


    ]]></script>

  </body>
</html>
