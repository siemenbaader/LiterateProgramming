<?xml version='1.0' encoding='UTF-8'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
  <head>
    <title> The Javascript Consistent Object Framework </title>
    <script src="helpers.js"/> 
    <script src='showdown.js'/>
    <script src='coffee-script.js'/>
    <coffee-script><![CDATA[

      Function.prototype.args = ->
        '''
          List of arguments for this function.
        '''
        @toString().match( /\(([^)]*)\)/ )[1]


      Function.prototype.doc_string = ->
        '''
          Raw doc string for this function or null if does not exists.
        '''
        matches = @toString().match( /^function\s+\w*\([^)]*\)\s+{\s+('(?:[^']|\\.)*');/ )
        matches and eval matches[1]


      Function.prototype.return_type = ->
        '''
          The return type for this function or null if unknown.
        '''
        null


      class @DocumentedObject

        doc_string: ->
          '''
            Hello, Object!
          '''

        constructor: ->
          '''
            Hello, Class!
          '''

        class: ->
          @constructor.name


       class @Foo << DocumentedObject

    ]]></coffee-script>
  </head>
  <body>

    <style> 
/*       body { font-family: Helvetica; } */
      .abstract { font-style: italic; padding-left: 5em; padding-right: 5em; display:block;}
      code { padding: .5em; font-weight: bold; margin-left: 2em; display: block; border: 1px solid blue; background-color: #DDF;}
      code.fail { border: 1px solid red; background-color: #FAA; }
      code.exception { border: 5px solid blue; }
      div.exception { border: 2px solid red; background-color: white; padding: 1em; margin-top: .5em; }

      code.pass {
        -webkit-animation-name: pass; 
        -webkit-animation-duration: 1s;
        -webkit-animation-iteration-count: 1;
        -webkit-animation-direction: alternate;
        -webkit-animation-timing-function: ease-out;
      }


 @-webkit-keyframes pass {
    0%  { border: 1px solid green; background-color: #AFA; }
    100%     { border: 1px solid black; background-color: none; }
  }


    </style>

<h1>A Consistent Object System for Javascript</h1>

<h2>Abstract</h2>

<source class="abstract"><![CDATA[
CHANGED

Developing larger object oriented programs with Javascript is often difficult for two reasons. First, it has an inconsistent object system which hinders encapsulation. Second, it has no good syntactic support for declaring objects in a concise way. These traits impose cognitive overhead when dealing with object oriented systems implemented in Javascript. Fortunately, Javascript is so dynamic that they can be rectified.

In this dynamic paper, I used a literate programming approach to work out, document, implement and test a simple object system that should allow Javascript programs to be developed with the same ease as Ruby programs.

]]></source>

<source><![CDATA[

]]></source>

    <script><![CDATA[
      var renderMarkdown = function() {

        var showdown = new Showdown.converter();

        var sources = document.getElementsByTagName("source");
        sources.forEach( function(src) {
          var t = src.textContent;
          var html = showdown.makeHtml(t);
          src.innerHTML = html;
        }) 
      }

      var testCodeExamples = function() {
        var examples = document.getElementsByTagName("code");
          examples.forEach( function(ex) {
          var code = ex.textContent;
          try {
            var outcome = eval(code);
          }
          catch(e) {
            ex.setAttribute("class", "exception");
            l(e)
            ex.appendChild(Node("div", {class: "exception"}, [e.toString(), ". Sorry, try REPL ..."] ))
            l(code);
          }
          ex.setAttribute("class", (outcome) ? "pass": "fail")
        })
      };

      var loadCoffeeScripts = function() {
        var scripts = document.getElementsByTagName("coffee-script");
        scripts.forEach( function(script) {
          CoffeeScript.run(script.textContent);
        });
      };

      loadCoffeeScripts();
      renderMarkdown();
      testCodeExamples();


    ]]></script>

  </body>
</html>
